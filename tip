#!/bin/bash

function display_curl() {
    echo '
    curl -sSL https://git.io/gobackup | bash

    curl -L -o coursier https://git.io/vgvpD 
    '
}

function display_svn() {
    echo '
    svn cp -m "create my branch" --parents http://host/trunk http://host/branches/my

    格式: svn propset svn:global-ignores filelist .
    格式: svn propset svn:ignore filePattern .

    $ svn propget svn:ignore backend
    $ svn pg svn:ignore backend
    $ svn pg svn:global-ignores
    $ svn status --no-ignore | grep "^I"
    $ svn pg svn:global-ignores . -v --show-inherited-props

    $ svn propset svn:ignore "*.pem" .
    $ svn propset svn:ignore "1.pem 2.pem " .
    $ svn propset svn:ignore -RF /root/svn-ignore.txt .

    $ svn proplist -v

    links: http://139.199.4.119/book/learn/scm/svn.html
    '
}

function display_ssh() {
    echo '
    $ ssh -p 22 user@host
    $ ssh -p 12367 -fNTL 8162:localhost:8161 user@host

    $ ssh USER@REMOTE_HOST "cat >> ~/.ssh/authorized_keys" < ~/.ssh/id_rsa.pub
     chmod 700 ~/.ssh
     chmod 600 ~/.ssh/authorized_keys
    '
}

function display_git() {
    echo '
    TODO
    '
}

function display_mysql() {
    echo '
    TODO
    '
}

function display_docker() {
    echo '
    docker run -it --name mypostgres -p 5432:5432 postgres
    docker run -it --name mypostgres -p 5432:5432 -d postgres

    docker start mypostgres
    docker exec -it mypostgres /bin/bash 
    '
}

function display_jmap() {
    echo '
    TODO
    '
}

function display_jstack() {
    echo '
    TODO
    '
}

function display_jstat() {
    echo '
    TODO
    '
}

function display_top() {
    echo '
    查看指定进程(pid)
    top -p 29087

    查看指定进程(pid) 线程
    top -Hp 29087
    '
}

function display_ps() {
    echo '
    ps -ef
    ps -aux
    '
}

function display_sbt() {
    echo '
    links: https://github.com/foundweekends/giter8/wiki/giter8-templates

    sbt -Dsbt.version=1.0.3 new https://github.com/akka/akka-http-scala-seed.g8
    sbt new scala/scala-seed.g8
    sbt new scala/scala-seed.g8
    sbt new scala/hello-world.g8
    sbt new Daxten/bay-scalajs.g8
    sbt ne vmunier/akka-http-scalajs.g8
    sbt new akka/akka-scala-seed.g8
    sbt new akka/akka-java-seed.g8
    sbt new akka/hello-akka.g8
    sbt new playframework/play-scala-seed.g8
    sbt new playframework/play-java-seed.g8
    sbt new lagom/lagom-scala.g8
    sbt new lagom/lagom-java.g8 
    sbt new scala-native/scala-native.g8
    sbt new scala-native/sbt-crossproject.g8
    sbt new http4s/http4s.g8

    sbt new holdenk/sparkProjectTemplate.g8
    sbt new spark-jobserver/spark-jobserver.g8 
    sbt new joost-de-vries/play-angular-typescript.g8
    sbt new joost-de-vries/play-reactjs-typescript.g8
    sbt new ScalaWilliam/akka-stream-kafka-template.g8
    sbt new liquidarmour/akka-http-docker.g8

    sbt new djspiewak/base.g8
    sbt new anvie/multiproject.g8
    '
}

function display_docker_compose() {
    echo '
    docker-compose exec activemq /bin/bash
    docker-compose logs -f --tail=200 activemq
    docker-compose exec activemq /bin/bash -c "tail -f -n 1000 /var/log/activemq/activemq.log"
    '
}

function display_xclip() {
    echo '
    xclip -sel clip < ~/.ssh/id_rsa.pub
    '
}

function diplay_iconv() {
    echo '
    iconv -f GBK -t UTF-8 input.txt > output.txt
    iconv -f GBK -t UTF-8 xxx.file -o good.file
    '
}

function display_systemctl() {
    echo '
    links: https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units

    $ systemctl list-units --all | grep redis
    $ systemctl list-units
    $ systemctl list-units --all --state=inactive
    $ systemctl list-units --all
    $ systemctl list-unit-files
    
    $ systemctl enable application.service
    $ systemctl disable application.service
    $ systemctl is-failed application.service
    $ systemctl is-enabled nginx
    $ systemctl show sshd.service
    $ systemctl is-active application.service
    $ systemctl status application.service
    
    $ systemctl start nginx.service
    $ systemctl stop application.service
    $ systemctl restart application.service
    $ systemctl reload-or-restart application.service
    
    $ systemctl list-dependencies sshd.service
    
    $ systemctl edit nginx.service
    
    $ systemctl daemon-reload
    '
}

function display_ulimit() {
    echo '
    查看系统的一些资源限制情况
    ulimit -a

    查看当前用户进程最大文件打开数
    ulimit -n

    当前shell设置
    ulimit -n 100000


    某个具体用户的资源加以限制的方法
    /etc/security/limits

    <domain> <type> <item> <value> 
    domain 表示用户或者组的名字，还可以使用 * 作为通配符。Type 可以有两个值，soft 和 hard。Item 则表示需要限定的资源，可以有很多候选值，如 stack，cpu，nofile 等等，分别表示最大的堆栈大小，占用的 cpu 时间，以及打开的文件数, e.g:
    * hard noflle 100


    links: https://yq.aliyun.com/articles/80530
    '
}

function display_egrep() {
    echo '
    tail -f -n 1000 /xxx/logs/application.log | egrep  "(WARN|ERROR)"
    '
}

function display_grep() {
    echo '
    tail -f -n 1000 /xxx/logs/application.log | grep  "ERROR"
    '
}

function display_tail() {
    echo '
    tail --follow=name --retry application.log | grep Exception
    '
}

function realize() {
    echo '
    $ realize start
    $ realize start --path="mypath"
    $ realize start --name="realize" --build
    $ realize start --path="realize" --run --no-config
    $ realize start --install --test --fmt --no-config
    $ realize start --path="/Users/username/go/src/github.com/tockins/realize-examples/coin/"
    '
}

function npm() {
    echo '
    $ npm init
    $ npm init -y

    $ npm install -g npm
    $ npm install -g yarn --registry=https://registry.npm.taobao.org

    $ npm run build
    $ npm start
    '
}

function display_dep() {
    echo '
    $ dep init

    $ dep ensure
    $ dep ensure -examples
    $ dep ensure -add github.com/pkg/errors

    update all your dependencies at once
    $ dep ensure --update

    $ dep ensure -update github.com/some/project github.com/other/project

    $ dep status
    $ dep status -dot | dot -T png | display
    $ dep status -dot | dot -T png -o status.png; display status.png
    '
}

function display_dot() {
    echo '
    dot [-Vv?] [-(GNE)name=val] [-(KTlso)<val>] <dot files>

    $ dot -T png xxx.dot
    $ dot -T png -o status.png xxx.dot
    '
}

function semantic_version() {
    echo '
    =: equal
    !=: not equal
    >: greater than
    <: less than
    >=: greater than or equal to
    <=: less than or equal to
    -: literal range. Eg: 1.2 - 1.4.5 is equivalent to >= 1.2, <= 1.4.5
    ~: minor range. Eg: ~1.2.3 is equivalent to >= 1.2.3, < 1.3.0
    ^: major range. Eg: ^1.2.3 is equivalent to >= 1.2.3, < 2.0.0
    [xX*]: wildcard. Eg: 1.2.x is equivalent to >= 1.2.0, < 1.3.0
    '
}

function display_n(){
    echo '
    n lts
    n stable

    n prune
     
    n-update
    '
}

function display_go_nil {
    echo '
    // links: [nil在Golang中有什么用？](https://zhuanlan.zhihu.com/p/27382301)

    // Do not declare concrete error vars
    func do() error {
        var err *doError // nil of type *doError
        return err // error (*doError, nil)
    }
    func main() {
        err := do() // error (*doError, nil)
        fmt.Println(err == nil) // false
    }
    
    // Do not return concrete error types：
    func do() *doError {
        return nil // nil of type *doError
    }
    func main() {
        err := do() // nil of type *doError
        fmt.Println(err == nil) // true
    }
    
    func do() *doError {
        return nil // nil of type *doError
    }
    func wrapDo() error { // error (*doError, nil)
        return do() // nil of type *doError
    }
    func main() {
        err := wrapDo() // error (*doError, nil)
        fmt.Println(err == nil) // false
    }
    '
}

function display_go() {
    echo '
    ## go bulid
    构建去掉debug信息
    $ go build -ldflags "-s" prog.go
    $ go build -ldflags "-s -w"

    压缩
    $ go build -ldflags "-s -w" main.go && upx main 
    
    纯静态编译 (http://tonybai.com/2017/06/27/an-intro-about-go-portability/)
    $ go build -o server-static-link -ldflags '-linkmode "external" -extldflags "-static"' server.go

    你的程序用了哪些标准库包？如果仅仅是非net、os/user等的普通包，那么你的程序默认将是纯静态的，不依赖任何c lib等外部动态链接库；
    如果使用了net这样的包含cgo代码的标准库包，那么CGO_ENABLED的值将影响你的程序编译后的属性：是静态的还是动态链接的；
        CGO_ENABLED=0的情况下，Go采用纯静态编译；
        如果CGO_ENABLED=1，但依然要强制静态编译，需传递-linkmode=external给cmd/link

    Cross compilation (http://tonybai.com/2014/10/20/cross-compilation-with-golang/)
    $ GOOS=windows GOARCH=386 go build -o pinger-client-win32.exe pingerclient/main.go
    $ GOOS=windows GOARCH=amd64 go build -o pinger-client-win64.exe pingerclient/main.go

    GOOS: windows | linux | darwin
    GOARCH: 386 | amd64

    ## go tools
    ### httpstat
    $ go get -u github.com/davecheney/httpstat
    $ httpstat https://example.com/

    ### pixterm
    $ go get -u github.com/eliukblau/pixterm
    $ 
    '
}

function display_docker() {
    echo '
    $ docker run -ti -name container-name image-id /bin/bash
    $ docker run -ti -name container-name -d image-id
    $ docker run -ti -name container-name -p 4000:4000 -d image-id
    $ docker run --rm -ti --net=host postgresql /bin/bash

    $ docker restart example
    $ docker start example
    $ docker attach example
    $ docker exec -it mypostgres /bin/bash

    $ docker logs --tail=20 -f example

    $ docker ps
    $ docker ps -a

    $ docker build -t image:latest .
    $ docker push image:latest
    $ docker pull image:latest
    $ docker pull nginx

    $ docker rm container-id
    $ docker rm container-name

    $ docker images
    $ docker rmi image-id

    $ docker save mynewimage > /tmp/mynewimage.tar
    $ docker load < /tmp/mynewimage.tar

    $ docker system prun
    $ docker system df

    ## Dockerfile
    e.g.
        FROM scratch
        COPY main /
        ENTRYPOINT ["/main"]

    ## docker-compose.yml
    e.g.
      version: '2'
      services:
        dict:
          image: ubuntu
          restart: unless-stopped
          #ports:
          # - "8000:8000"
          working_dir: /app
          volumes:
           - ./dict/rustversion:/app
          command: ./rust_rocket_version
          links:
           - redis
          environment:
           - ROCKET_ENV=prod
           - ROCKET_PORT=8080
           - ROCKET_REDIS_URL=redis://redis/
       '
}

function display_my() {
    url=http://139.199.4.119/book/
    echo "
    个人文档: $url
    "
    xdg-open $url
}

function display_consul() {
    echo '
    go get -v github.com/hashicorp/consul

    $ consul agent --dev

    $ dig +noall +answer @127.0.0.1 -p 8600 webkv.service.dc1.consul
    $ curl "localhost:8500/v1/health/service/webkv?passing"
    '
}

function display_nginx() {
    echo '
    ## nginx
    $ nginx -p `pwd`/ -c conf/nginx.conf
    $ nginx -p `pwd`/ -s reload
    $ nginx -p `pwd`/ -s stop
    $ nginx -p `pwd`/ -c conf/nginx.conf -g "daemon off;"


    ## location 匹配规则
    `location [=|~|~*|^~] /uri/ { … }`

    location = /uri	= 表示精确匹配，只有完全匹配上才能生效
    location ^~ /uri	^~ 开头对URL路径进行前缀匹配，并且在正则之前。
    location ~ pattern	开头表示区分大小写的正则匹配
    location ~* pattern	开头表示不区分大小写的正则匹配
    location /uri	不带任何修饰符，也表示前缀匹配，但是在正则匹配之后
    location /	通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default

    首先精确匹配 =
    其次前缀匹配 ^~, 如果有包含关系时，按最大匹配原则进行匹配。比如在前缀匹配：location /dir01 与 location /dir01/dir02，如有请求 http://localhost/dir01/dir02/file 将最终匹配到 location /dir01/dir02
    其次是按文件中顺序的正则匹配
    然后匹配不带任何修饰的前缀匹配。
    最后是交给 / 通用匹配
    当有匹配成功时候，停止匹配，按当前匹配规则处理请求
    '
}

function display_buffalo() {
    echo '
    $ buffalo new testm --api --skip-pop -f

    $ go get -u -v github.com/gobuffalo/buffalo/buffalo
    $ go get -u -v -tags nosqlite github.com/gobuffalo/buffalo/buffalo
    '
}

function dislay_uml() {
    echo '
    links: http://www.cnblogs.com/silent2012/archive/2011/09/07/2169946.html
    '
    xdg-open http://www.cnblogs.com/silent2012/archive/2011/09/07/2169946.html
}

function display_keytool() {
    echo '
    links: https://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html

    ## -genseckey {-alias alias} {-keyalg keyalg} {-keysize keysize} [-keypass keypass] {-storetype storetype} {-keystore keystore} [-storepass storepass] {-providerClass provider_class_name {-providerArg provider_arg}} {-v} {-protected} {-Jjavaoption}
    Generates a secret key and stores it in a new KeyStore.SecretKeyEntry identified by alias
    $ keytool -genseckey help
    $ keytool -genseckey -keystore keystore.jceks -storetype jceks -storepass 123456 -keyalg HMacSHA256 -keysize 2048 -alias HS256 -keypass 234567

    ## -genkeypair {-alias alias} {-keyalg keyalg} {-keysize keysize} {-sigalg sigalg} [-dname dname] [-keypass keypass] {-validity valDays} {-storetype storetype} {-keystore keystore} [-storepass storepass] {-providerClass provider_class_name {-providerArg provider_arg}} {-v} {-protected} {-Jjavaoption}
    Generates a key pair (a public key and associated private key). Wraps the public key into an X.509 v3 self-signed certificate, which is stored as a single-element certificate chain. This certificate chain and the private key are stored in a new keystore entry identified by alias.

    $ keytool -genkeypair -dname "cn=Mark Jones, ou=JavaSoft, o=Sun, c=US" -alias business -keypass kpi135 -keystore /working/mykeystore -storepass ab987c -validity 180
    $ keytool -genkeypair -alias mykey -keyalg DSA -keysize 1024 -sigalg DSA -keypass 123456 -storetype jceks -keystore a.jceks -storepass 123456 -v

    ## -importcert {-alias alias} {-file cert_file} [-keypass keypass] {-noprompt} {-trustcacerts} {-storetype storetype} {-keystore keystore} [-storepass storepass] {-providerName provider_name} {-providerClass provider_class_name {-providerArg provider_arg}} {-v} {-protected} {-Jjavaoption} 
    Reads the certificate or certificate chain (where the latter is supplied in a PKCS#7 formatted reply) from the file cert_file, and stores it in the keystore entry identified by alias

    $ keytool -certreq -alias mykey -sigalg DSA -file c.req -keypass 123456 -storetype jceks -storepass 123456 -keystore a.jceks
    $ keytool -exportcert -alias mykey -sigalg DSA -file c.cert -keypass 123456 -storetype jceks -storepass 123456 -keystore a.jceks

    ## keytool -printcert {-file cert_file} {-v}
    $ keytool -printcert -file VScert.cer
    '
}

function display_du() {
    echo '
    查看当前目录总共占的容量
    $ du -sh .

    查看当前目录下一级子文件和子目录占用的磁盘容量 
    $ du -lh --max-depth=1
    '
}

###################################
case "$1" in
  curl) display_curl;;
  svn)  display_svn ;;
  ssh)  display_ssh ;;
  git)  display_git ;;
  mysql) diplay_mysql ;;
  docker) display_docker ;;
  jmap) display_jmap ;;
  jstack) display_jstack ;;
  jstat) display_jstat ;;
  top) display_top ;;
  ps) display_ps ;;
  sbt) display_sbt ;;
  docker-compose) display_docker_compose ;;
  xclip) display_xclip;;
  iconv) diplay_iconv;;
  systemctl) display_systemctl;;
  ulimit) display_ulimit;;
  egrep) display_egrep;;
  grep) display_grep;;
  tail) display_tail;; 
  realize) realize;;
  npm) npm;;
  n) display_n;;
  dep) display_dep;;
  dot) display_dot;; 
  semantic_version) semantic_version;;
  go_nil) display_go_nil;;
  go) display_go;;
  my) display_my;; 
  consul) display_consul;;
  nginx) display_nginx;;
  buffalo) display_buffalo;;
  uml) dislay_uml;;
  keytool) display_keytool;;
  du) display_du;;
  *)  echo '
      $ tip top | ps | du | systemctl | ulimit | egrep | grep | tail
            jmap | jstack | jstat | keytool | sbt
            curl | svn | ssh | git | mysql | dot | xclip | iconv 
            docker | docker-compose
            realize | dep | npm | n
            go | go_nil
            consul | nginx
            buffalo
            semantic_version | uml
            my';;

esac
