#!/usr/bin/env ruby


name = ARGV[0] || 'test-java'

def sh(cmd)
  puts cmd
  ret = system cmd
  raise 'error' unless ret
end

################################################################################
sh "mkdir #{name}"

%w[resources java].each do |x|
  sh "mkdir -p #{name}/src/main/#{x}"
end

sh "cd #{name}; gradle init"

build_content = <<-eos
apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'io.reactivex.rxjava2:rxjava:2.1.14'
    compile 'com.google.guava:guava:27.0.1-jre'
    compile 'org.apache.commons:commons-lang3:3.8.1'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'commons-codec:commons-codec:1.11'

    testCompile "junit:junit:4.12"
    testCompile 'org.mockito:mockito-core:2.20.0'
}

mainClassName = 'demo.Main'
defaultTasks 'run'
eos

File.write "#{name}/build.gradle", build_content

main_content = <<-eos
package demo;

import io.reactivex.Flowable;

public class Main {
    public static void main(String []args) {
       System.out.println("Hello, java");
       Flowable.just(1, 2).repeat().take(10).blockingForEach(System.out::println);
    }
}

eos

sh "mkdir -p #{name}/src/main/java/demo"
sh "mkdir -p #{name}/src/test/java/demo"
sh "mkdir -p #{name}/src/main/resources"
File.write "#{name}/src/main/java/demo/Main.java", main_content

test_content = <<-eos
package demo;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DemoTest {
    @Test
    public void testIt(){
        assertEquals("hello", "hello");
    }
}
eos

File.write "#{name}/src/test/java/demo/DemoTest.java", test_content
################################################################


################################################################
gp_content = <<-eos
eos

File.write "#{name}/gradle.properties", gp_content

gitignore_content = <<-eos
.gradle
build/
out/

# Ignore Gradle GUI config
gradle-app.setting

# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)
# !gradle-wrapper.jar

# Cache of project
.gradletasknamecache

.idea
*.iml

.settings
.classpath
.project

*.pyc
bin/
target/
.vscode/
eos
File.write "#{name}/.gitignore", gitignore_content

## fabfile

content = <<-eos
# -*- coding: utf-8 -*-

from fabric.api import *


def run():
    """run"""
    local('./gradlew run')


def dev():
    """dev"""
    local('watchexec -r "./gradlew run -no-daemon"')


def clean():
    """clean"""
    local('./gradlew clean')
eos

File.write("#{name}/fabfile.py", content)

content = <<-eos
task :default do
  sh 'rake -T'
end

desc 'run'
task :run do
  sh './gradlew run'
end

desc 'dev'
task :dev do
  sh 'watchexec -r "./gradlew run -no-daemon"'
end

desc 'clean'
task :clean do
  sh './gradlew clean'
end
eos

File.write("#{name}/Rakefile", content)

sh "cd #{name}; tree"

puts "cd #{name}"

