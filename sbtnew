#!/bin/bash

#-----------------------------------------------------------------------------
# Modified By itang
#-----------------------------------------------------------------------------

## Origin info
#------------------------------------------------------------------------------
# Name:    sbtmkdirs
# Purpose: Create an SBT project directory structure with a few simple options.
# Author:  Alvin Alexander, http://alvinalexander.com
# Info:    http://alvinalexander.com/sbtmkdirs
# License: Creative Commons Attribution-ShareAlike 2.5 Generic
#          http://creativecommons.org/licenses/by-sa/2.5/
#------------------------------------------------------------------------------
##
declare -r TRUE=0
declare -r FALSE=1

ScalaVersion=2.11.4
SbtVersion=0.13.7
SbtassemblyVersion=0.12.0
SbtDependencyGraph=0.7.4
ScalatestVersion=2.2.2
JavaVersion=1.7
ScalazVersion=7.1.0
ShapelessVersion=2.0.0
ScatangVersion=0.1

# takes a string and returns true if it seems to represent "yes"
function isYes() {
    local x=$1
    [ $x = "y" ] && echo $TRUE; return
    [ $x = "Y" ] && echo $TRUE; return
    [ $x = "yes" ] && echo $TRUE; return
    echo $FALSE
}

echo "This script creates an SBT project directory beneath the current directory."

while [ $TRUE ]; do

    echo ""
    read -p "Directory/Project Name (MyFirstProject): " directoryName
    directoryName=${directoryName:-MyFirstProject}

    read -p "Create .gitignore File? (Y/n): " createGitignore
    createGitignore=${createGitignore:-y}

    read -p "Create README.md File? (Y/n): " createReadme
    createReadme=${createReadme:-y}

    echo ""
    echo "-----------------------------------------------"
    echo "Directory/Project Name: $directoryName"
    echo "Create .gitignore File?: $createGitignore"
    echo "Create README.md File?: $createReadme"
    echo "-----------------------------------------------"
    read -p "Create Project? (Y/n): " createProject
    createProject=${createProject:-y}
    [ "$(isYes $createProject)" = "$TRUE" ] && break

done

mkdir -p ${directoryName}/src/{main,test}/{java,resources,scala}
mkdir ${directoryName}/lib ${directoryName}/project ${directoryName}/target

# optional
#mkdir -p ${directoryName}/src/main/config
#mkdir -p ${directoryName}/src/{main,test}/{filters,assembly}
#mkdir -p ${directoryName}/src/site

#---------------------------------
# create an initial build.sbt file
#---------------------------------
echo "name := \"$directoryName\"

version := \"1.0-SNAPSHOT\"

scalaVersion := \"${ScalaVersion}\"

javacOptions ++= Seq(\"-encoding\", \"UTF-8\", \"-source\", \"${JavaVersion}\", \"-target\", \"${JavaVersion}\", \"-Xlint\")

scalacOptions ++= Seq(\"-deprecation\", \"-feature\", \"-Yno-adapted-args\", \"-Xfatal-warnings\")

libraryDependencies ++= Seq(
  //\"org.scalaz\" %% \"scalaz-core\" % \"${ScalazVersion}\",
  //\"com.chuusai\" %% \"shapeless\" % \"${ShapelessVersion}\",
  \"me.itang\" %% \"scatang\" % \"${ScatangVersion}\",
  \"org.scalatest\" %% \"scalatest\" % \"${ScalatestVersion}\" % \"test\"
)

resolvers ++= Seq(
  Resolver.sonatypeRepo(\"snapshots\"),
  Resolver.sonatypeRepo(\"releases\")
)

resolvers += \"itang's repos\" at \"http://itang.github.io/maven-repo\"

incOptions := incOptions.value.withNameHashing(true)

mainClass in assembly := Some(\"Main\")

net.virtualvoid.sbt.graph.Plugin.graphSettings

initialCommands in console := \"import scatang._;import scatang.string._\"

" > ${directoryName}/build.sbt

#-----------------
# init plugins.sbt
#-----------------
echo "addSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"${SbtassemblyVersion}\")

addSbtPlugin(\"net.virtual-void\" % \"sbt-dependency-graph\" % \"${SbtDependencyGraph}\")" > ${directoryName}/project/plugins.sbt

#-----------------
# init build.properties
#-----------------
echo "sbt.version=${SbtVersion}" > ${directoryName}/project/build.properties

#----------------------------------
# init src/main/scala/example.scala
#----------------------------------
echo "/**
 * main.scala
 */

import scatang._

object Main {

  def main(args: Array[String]): Unit = {
    6.times {
      println(\"Hello, World!\")
    }
  }
}

" > ${directoryName}/src/main/scala/main.scala

#----------------------------------
# init src/test/scala/example_test.scala
#----------------------------------

#echo "package example
#
#import org.scalatest.FunSpec
#
#class ExampleSpec extends FunSpec {
#
#  describe(\"echo\") {
#    it(\"test\") {
#      assert(\"hello\" === \"hello\")
#    }
#  }
#}" >  ${directoryName}/src/test/scala/example_test.scala

#------------------------------
# create .gitignore, if desired
#------------------------------
if [ "$(isYes $createGitignore)" = "$TRUE" ]; then
    echo "bin/
project/project/
target/
lib/
.cache
.classpath
.project
.settings

.svn" > ${directoryName}/.gitignore
fi

#-----------------------------
# create README.me, if desired
#-----------------------------
if [ "$(isYes $createReadme)" = "$TRUE" ]; then
    touch ${directoryName}/README.md
fi

echo ""
echo "Project created. See the following URL for build.sbt examples:"
echo "http://alvinalexander.com/scala/sbt-syntax-examples"

echo "cd ${directoryName}"
cd ${directoryName}

echo "eclipse with-source=true"
sbt 'eclipse with-source=true';

echo "enter sbt:"
sbt
