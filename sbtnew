#!/bin/bash

#-----------------------------------------------------------------------------
# Modified By itang
#-----------------------------------------------------------------------------

## Origin info
#------------------------------------------------------------------------------
# Name:    sbtmkdirs
# Purpose: Create an SBT project directory structure with a few simple options.
# Author:  Alvin Alexander, http://alvinalexander.com
# Info:    http://alvinalexander.com/sbtmkdirs
# License: Creative Commons Attribution-ShareAlike 2.5 Generic
#          http://creativecommons.org/licenses/by-sa/2.5/
#------------------------------------------------------------------------------
##
declare -r TRUE=0
declare -r FALSE=1

ScalaVersion=2.11.8
SbtVersion=0.13.11
SbtEclipseVersion=4.0.0
SbtUpdatesVersion=0.1.10
SbtassemblyVersion=0.14.2
SbtDependencyGraph=0.8.2
SbtScoverageVersion=1.3.5
ScalatestVersion=2.2.6
JavaVersion=1.8
ScalazVersion=7.2.1
ShapelessVersion=2.3.0
ScatangVersion=0.1
ScalaStyleVersion=0.8.0
AmmoniteVersion=0.5.6

ScalaJava8Version=0.7.0

# takes a string and returns true if it seems to represent "yes"
function isYes() {
    local x=$1
    [ $x = "y" ] && echo $TRUE; return
    [ $x = "Y" ] && echo $TRUE; return
    [ $x = "yes" ] && echo $TRUE; return
    echo $FALSE
}

echo "This script creates an SBT project directory beneath the current directory."

if [ -n "$1" ]; then
  directoryName=$1
else
  read -p "Directory/Project Name (MyFirstProject): " directoryName
fi
directoryName=${directoryName:-MyFirstProject}
createGitignore="y"
createReadme="y"

echo ""
echo "-----------------------------------------------"
echo "Directory/Project Name: $directoryName"
echo "Create .gitignore File?: $createGitignore"
echo "Create README.md File?: $createReadme"
echo "-----------------------------------------------"
createProject="y"

mkdir -p ${directoryName}/src/{main,test}/{java,resources,scala}
mkdir ${directoryName}/lib ${directoryName}/project ${directoryName}/target

# optional
#mkdir -p ${directoryName}/src/main/config
#mkdir -p ${directoryName}/src/{main,test}/{filters,assembly}
#mkdir -p ${directoryName}/src/site

#---------------------------------
# create an initial build.sbt file
#---------------------------------
echo "name := \"$directoryName\"

version := \"1.0-SNAPSHOT\"

organization := \"deftype.com\"

scalaVersion := \"${ScalaVersion}\"

javacOptions ++= Seq(\"-encoding\", \"UTF-8\", \"-source\", \"${JavaVersion}\", \"-target\", \"${JavaVersion}\", \"-Xlint\")

scalacOptions ++= Seq(\"-deprecation\", \"-feature\", \"-Yno-adapted-args\", \"-Xfatal-warnings\", \"-YclasspathImpl:flat\", \"-Xexperimental\", \"-Ybackend:GenBCode\", \"-Ydelambdafy:method\", \"-target:jvm-1.8\")

libraryDependencies ++= Seq(
  \"org.scala-lang.modules\" %% \"scala-java8-compat\" % \"${ScalaJava8Version}\",
  //\"org.scalaz\" %% \"scalaz-core\" % \"${ScalazVersion}\",
  //\"com.chuusai\" %% \"shapeless\" % \"${ShapelessVersion}\",
  \"me.itang\" %% \"scatang\" % \"${ScatangVersion}\",
  \"org.scalatest\" %% \"scalatest\" % \"${ScalatestVersion}\" % \"test\"
  //,\"com.lihaoyi\" %% \"ammonite-repl\" % \"${AmmoniteVersion}\" % \"test\"  cross CrossVersion.full
)

resolvers ++= Seq(
  DefaultMavenRepository,
  Resolver.sonatypeRepo(\"snapshots\"),
  Resolver.sonatypeRepo(\"releases\")
)

resolvers += \"itang's repos\" at \"http://www.haoshuju.net:8078\"

incOptions := incOptions.value.withNameHashing(true)

mainClass in assembly := Some(\"Main\")

assemblyMergeStrategy in assembly := {
  //case PathList(\"javax\", \"servlet\", xs @ _*)         => MergeStrategy.first
  //case PathList(ps @ _*) if ps.last endsWith \".html\" => MergeStrategy.first
  //case \"application.conf\"                            => MergeStrategy.concat
  //case \"unwanted.txt\"                                => MergeStrategy.discard
  case x =>
    val oldStrategy = (assemblyMergeStrategy in assembly).value
    oldStrategy(x)
}

// no need for v0.8
//net.virtualvoid.sbt.graph.Plugin.graphSettings

EclipseKeys.createSrc := EclipseCreateSrc.Default + EclipseCreateSrc.Resource

initialCommands in console := \"import scatang._;\"

//initialCommands in (Test, console) := \"\"\"ammonite.repl.Repl.run(\"\")\"\"\"

publishTo := {
  val nexus = \"http://120.24.68.174:8081/nexus/content/repositories\"
  if (isSnapshot.value)
    Some(\"snapshots\" at nexus + \"/snapshots\")
  else
    Some(\"releases\"  at nexus + \"/releases\")
}

credentials += Credentials(Path.userHome / \".ivy2\" / \".credentials\")

" > ${directoryName}/build.sbt

#-----------------
# init plugins.sbt
#-----------------
echo "addSbtPlugin(\"com.typesafe.sbteclipse\" % \"sbteclipse-plugin\" % \"${SbtEclipseVersion}\")

addSbtPlugin(\"com.timushev.sbt\" % \"sbt-updates\" % \"${SbtUpdatesVersion}\")

addSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"${SbtassemblyVersion}\")

addSbtPlugin(\"net.virtual-void\" % \"sbt-dependency-graph\" % \"${SbtDependencyGraph}\")

addSbtPlugin(\"org.scoverage\" % \"sbt-scoverage\" % \"${SbtScoverageVersion}\")

addSbtPlugin(\"org.scalastyle\" %% \"scalastyle-sbt-plugin\" % \"${ScalaStyleVersion}\")" > ${directoryName}/project/plugins.sbt

#-----------------
# init build.properties
#-----------------
echo "sbt.version=${SbtVersion}" > ${directoryName}/project/build.properties

#----------------------------------
# init src/main/scala/example.scala
#----------------------------------
echo "/**
 * main.scala
 */

import scatang._

object Main {

  def main(args: Array[String]): Unit = {
    6.times {
      println(\"Hello, World!\")
    }
  }
}

" > ${directoryName}/src/main/scala/main.scala

#----------------------------------
# init src/test/scala/example_test.scala
#----------------------------------

#echo "package example
#
#import org.scalatest.FunSpec
#
#class ExampleSpec extends FunSpec {
#
#  describe(\"echo\") {
#    it(\"test\") {
#      assert(\"hello\" === \"hello\")
#    }
#  }
#}" >  ${directoryName}/src/test/scala/example_test.scala

#------------------------------
# create .gitignore, if desired
#------------------------------
if [ "$(isYes $createGitignore)" = "$TRUE" ]; then
    echo "bin/
project/project/
target/
lib/
.cache
.classpath
.project
.settings

.svn" > ${directoryName}/.gitignore
fi

#------------------------------
# create Rakefile
#-----------------------------

echo "namespace :dev do
  desc 'Generate Scalastyle config'
  task :scalastyle_config do
    sh 'sbt scalastyleGenerateConfig'
  end
end

namespace :source do
  namespace :check do
    desc 'check scala style'
    task :scalastyle do
      sh 'sbt scalastyle'
    end
  end
end" > ${directoryName}/Rakefile

#-----------------------------
# create README.me, if desired
#-----------------------------
if [ "$(isYes $createReadme)" = "$TRUE" ]; then
    touch ${directoryName}/README.md
fi

echo ""
echo "Project created. See the following URL for build.sbt examples:"
echo "http://alvinalexander.com/scala/sbt-syntax-examples"

cd ${directoryName}

echo "eclipse with-source=false"
sbt 'eclipse with-source=false';
