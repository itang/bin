#!/bin/bash

ScalaVersion=3.0.0-RC2
SbtVersion=1.5.0
SbtBloopVersion=1.4.8
SbtRevolverVersion=0.9.1
SbtNativePackagerVersion=1.8.1

directoryName=""

init() {
  if [ -n "$1" ]; then
    directoryName=$1
  else
    read -r -p "Directory/Project Name (MyFirstProject): " directoryName
  fi
  directoryName=${directoryName:-MyFirstProject}
}

setup() {
  echo ""
  echo "-----------------------------------------------"
  echo "Directory/Project Name: $directoryName"
  echo "-----------------------------------------------"

  mkdir -p "${directoryName}/src/main/java"
  mkdir -p "${directoryName}/src/main/resources"
  mkdir -p "${directoryName}/src/main/scala"
  mkdir -p "${directoryName}/src/test/scala"
  mkdir "${directoryName}/lib" "${directoryName}/project" "${directoryName}/target"
}

# create an initial build.sbt file
#---------------------------------
createSbt() {
  echo "enablePlugins(GraalVMNativeImagePlugin)

val graalVMNativeImageCommandStr = {
  val windows = System.getProperty(\"os.name\").toLowerCase.contains(\"windows\")
  val nativeImageCmd = \"native-image\" + (if (windows) \".cmd\" else \"\")
  val r = s\"\${System.getenv(\"GRAALVM_HOME\")}/bin/\$nativeImageCmd\"
  println(s\"graalVMNativeImageCommand: \${r}\")
  r
}

lazy val root = project
.in(file(\".\"))
.settings(
  name := \"$directoryName\",
  description := \"Example sbt project that compiles using Scala\",
  version := \"0.1.0\",
  scalaVersion := \"${ScalaVersion}\",
  libraryDependencies ++= Seq(
      \"com.novocode\" % \"junit-interface\" % \"0.11\" % Test,
      \"org.scalameta\" %% \"munit\" % \"0.7.23\" % Test
    //,\"org.springframework.boot\" % \"spring-boot-starter\" % springBootVersion
  ),
  resolvers += (\"p\" at \"https://maven.aliyun.com/repository/public\").withAllowInsecureProtocol(true),
  graalVMNativeImageCommand := graalVMNativeImageCommandStr,
  graalVMNativeImageOptions ++= Seq(
    \"--report-unsupported-elements-at-runtime\",
    \"-H:+ReportExceptionStackTraces\",
    \"--verbose\",
    \"--allow-incomplete-classpath\",
    \"--initialize-at-build-time\",
    \"--no-fallback\",
    \"-H:-CheckToolchain\",
    \"-H:+TraceNativeToolUsage\",
    \"-H:ConfigurationFileDirectories=.\"
  )
)
" >"${directoryName}/build.sbt" #---------------------------------
}

#-----------------
# init plugins.sbt
#-----------------
createPlugins() {
  echo "addSbtPlugin(\"ch.epfl.scala\" % \"sbt-bloop\" % \"${SbtBloopVersion}\")
addSbtPlugin(\"io.spray\" % \"sbt-revolver\" % \"${SbtRevolverVersion}\")
addSbtPlugin(\"com.typesafe.sbt\" % \"sbt-native-packager\" % \"${SbtNativePackagerVersion}\")" >"${directoryName}/project/plugins.sbt"
}

#-----------------
# init build.properties
#-----------------
createBuildProperties() {
  echo "sbt.version=${SbtVersion}" >"${directoryName}/project/build.properties"
}

#----------------------------------
# init src
#----------------------------------
createSources() {
  echo "package object util {

  import java.text.SimpleDateFormat
  import java.util.Date

  implicit class DateOps(d: Date) {
    def format(pattern: String = \"yyyyMMdd\"): String = new SimpleDateFormat(pattern).format(d)
  }

  def time[T](block: => T): T = {
    val start = System.currentTimeMillis()
    val ret = block
    val end = System.currentTimeMillis()
    println(s\">>Cost time: \${end - start}ms\")
    ret
  }

  implicit class AnyOpts[T](v: T) {
    def orElse(pred: Boolean)(elseAction: (T) => T): T = if (pred) elseAction(v) else v

    def orElse(pred: (T) => Boolean)(elseAction: (T) => T): T = orElse(pred(v))(elseAction)
  }
}" >"${directoryName}/src/main/scala/util.scala"

  echo "import java.util.Date
import scala.jdk.CollectionConverters._
import scala.util.chaining._
import scala.util.Using
import scala.io.Source
import util._

object Main {

  def main(args: Array[String]): Unit = time {
    println(s\"args: \${args.mkString(\" \")}\")
    System.getenv.asScala.filter(it => it._1.startsWith(\"ENV\")).foreach(println)

    Using(Source.fromFile(\"build.sbt\")){ it => it.getLines().filter(_.contains(\"version\")).foreach(println)}

    \"Hello, World\"
      .tap(println)
      .pipe(_ + \", \" + new Date().format(\"yyyy-MM-dd\"))
      .pipe(println)
  }
}" >"${directoryName}/src/main/scala/main.scala"
}

createTestSources() {
  echo "class Test2 extends munit.FunSuite {
  test(\"test1\") {
    val a = 2
    val b = 2
    assertEquals(a, b)
  }
}
" >"${directoryName}/src/test/scala/test1.scala"
}

#------------------------------
# create .gitignore, if desired
#------------------------------
createGitignore() {
  echo "bin/
project/project/
target/
lib/
.cache
.classpath
.project
.settings

.svn

.idea/
*.iml
.metals
" >"${directoryName}/.gitignore"
}

createRakefile() {
  echo 'task default: :usage

task :usage do
  sh "rake -T"
end

desc "run"
task :run do
  system("sbt run")
end

desc "dev"
task :dev do
  system("sbt \"~reStart\"")
end
desc "native-build"
task :native_build do
  sh "sbt \"show graalvm-native-image:packageBin\""
end' >"${directoryName}/Rakefile"
}

createReadme() {
  #-----------------------------
  # create README.md, if desired
  #-----------------------------
  echo "# ${directoryName}" >"${directoryName}/README.md"
}

showProjectInfo() {
  echo ""
  echo "Project created."
  echo "cd $directoryName"
}

main() {
  echo "This script creates an SBT project directory beneath the current directory."

  init "$1"

  setup

  createSbt

  createBuildProperties

  createPlugins

  createSources

  createTestSources

  createRakefile

  createReadme

  showProjectInfo
}

main "$@"
