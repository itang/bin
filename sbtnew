#!/bin/bash

ScalaVersion=3.0.0-RC2
SbtVersion=1.5.0
SbtBloopVersion=1.4.8
SbtRevolverVersion=0.9.1

echo "This script creates an SBT project directory beneath the current directory."

if [ -n "$1" ]; then
  directoryName=$1
else
  read -r -p "Directory/Project Name (MyFirstProject): " directoryName
fi
directoryName=${directoryName:-MyFirstProject}

echo ""
echo "-----------------------------------------------"
echo "Directory/Project Name: $directoryName"
echo "-----------------------------------------------"

mkdir -p "${directoryName}/src/main/java"
mkdir -p "${directoryName}/src/main/resources"
mkdir -p "${directoryName}/src/main/scala"
mkdir "${directoryName}/lib" "${directoryName}/project" "${directoryName}/target"

#---------------------------------
# create an initial build.sbt file
#---------------------------------
echo "lazy val root = project
  .in(file(\".\"))
  .settings(
    name := \"$directoryName\",
    description := \"Example sbt project that compiles using Scala\",
    version := \"0.1.0\",
    scalaVersion := \"${ScalaVersion}\",
    libraryDependencies ++= Seq(
      //\"org.springframework.boot\" % \"spring-boot-starter\" % springBootVersion
    ),
    resolvers += (\"p\" at \"https://maven.aliyun.com/repository/public\").withAllowInsecureProtocol(true)
  )
" > "${directoryName}/build.sbt"

#-----------------
# init plugins.sbt
#-----------------
echo "addSbtPlugin(\"ch.epfl.scala\" % \"sbt-bloop\" % \"${SbtBloopVersion}\")
addSbtPlugin(\"io.spray\" % \"sbt-revolver\" % \"${SbtRevolverVersion}\")" > "${directoryName}/project/plugins.sbt"


#-----------------
# init build.properties
#-----------------
echo "sbt.version=${SbtVersion}" > "${directoryName}/project/build.properties"

#----------------------------------
# init src/main/scala/example.scala
#----------------------------------
echo "package object util {

  import java.text.SimpleDateFormat
  import java.util.Date

  implicit class DateOps(d: Date) {
    def format(pattern: String = \"yyyyMMdd\"): String = new SimpleDateFormat(pattern).format(d)
  }

  def time[T](block: => T): T = {
    val start = System.currentTimeMillis()
    val ret = block
    val end = System.currentTimeMillis()
    println(s\">>Cost time: \${end - start}ms\")
    ret
  }

  implicit class AnyOpts[T](v: T) {
    def orElse(pred: Boolean)(elseAction: (T) => T): T = if (pred) elseAction(v) else v

    def orElse(pred: (T) => Boolean)(elseAction: (T) => T): T = orElse(pred(v))(elseAction)
  }
}" > "${directoryName}/src/main/scala/util.scala"

echo "import java.util.Date
import scala.jdk.CollectionConverters._
import scala.util.chaining._
import scala.util.Using
import scala.io.Source
import util._

object Main {

  def main(args: Array[String]): Unit = time {
    println(s\"args: \${args.mkString(\" \")}\")
    System.getenv.asScala.filter(it => it._1.startsWith(\"ENV\")).foreach(println)

    Using(Source.fromFile(\"build.sbt\")){ it => it.getLines().filter(_.contains(\"version\")).foreach(println)}

    \"Hello, World\"
      .tap(println)
      .pipe(_ + \", \" + new Date().format(\"yyyy-MM-dd\"))
      .pipe(println)
  }
}" > "${directoryName}/src/main/scala/main.scala"

#------------------------------
# create .gitignore, if desired
#------------------------------
echo "bin/
project/project/
target/
lib/
.cache
.classpath
.project
.settings

.svn

.idea/
*.iml
.metals
" > "${directoryName}/.gitignore"

echo 'task default: :usage

task :usage do
  sh "rake -T"
end

desc "run"
task :run do
  system("sbt run")
end

desc "dev"
task :dev do
  system("sbt \"~reStart\"")
end' > "${directoryName}/Rakefile"

#-----------------------------
# create README.md, if desired
#-----------------------------
echo "# ${directoryName}" > "${directoryName}/README.md"

echo ""
echo "Project created."
echo "cd $directoryName"
