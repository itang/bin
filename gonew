#!/usr/bin/env ruby

name = ARGV[0] || 'test_go'
PDIR = ENV['GOPATH'] + '/src'

TARGET_DIR = "#{PDIR}/#{name}".freeze

raise "dir existing: #{TARGET_DIR}" if Dir.exist?(TARGET_DIR)

def sh(cmd)
    puts cmd
    ret = system cmd
    raise 'error' unless ret
end

sh "mkdir -p #{TARGET_DIR}"
# sh "cd #{TARGET_DIR};glide init"

main_content = <<eos
package main

import (
  "fmt"
  "time"

  ttime "github.com/itang/gotang/time"
)

func main() {
  fmt.Println("Hello, World!")
  fmt.Printf("Yesterday: %v\\n", ttime.RichTime(time.Now()).Yesterday())
}

eos

File.write("#{TARGET_DIR}/main.go", main_content)

ignore_content = <<eos
vendor/
tmp/

*.pyc

eos

File.write("#{TARGET_DIR}/.gitignore", ignore_content)

fabfile_content = <<eos
# -*- coding: utf-8 -*-

from fabric.api import *


def run():
    """run"""
    local('go run main.go')


def dev():
    """dev"""
    # https://github.com/tockins/realize
    local('realize fast')


def repl():
    """repl"""
    local('gore')


def update():
    """dep ensure -update"""
    status()
    # https://github.com/golang/dep
    local('dep ensure -update')
    status()


def status():
    """dep status"""
    local('dep status')


eos

File.write("#{TARGET_DIR}/fabfile.py", fabfile_content)

sh "cd #{TARGET_DIR};go fmt ./..."

sh "cd #{TARGET_DIR};dep init"

sh "tree #{TARGET_DIR}"

puts 'Finished!'

puts "just cd #{TARGET_DIR}"
