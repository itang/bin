#!/usr/bin/env ruby

def sh(cmd)
  puts "$ #{cmd}"
  system cmd
end

def write(file, content)
  puts ">>write to file: #{file}:\n#{content}"
  puts ''
  File.write file, content
end

def new_phoenix_project
  project_name = ARGV[1] || 'test_phoenix'
  sh "mix phoenix.new #{project_name} --no-brunch --no-ecto"
  # sh "mix phoenix.new #{project_name} --no-brunch --no-ecto --no-html"
end

$base_fabfile_content = <<-eos
# -*- coding: utf-8 -*-

from fabric.api import *


def usage():
    """Usage"""
    print('usage')


eos
def new_fabfile
  content = $base_fabfile_content

  File.write 'fabfile.py', content
end

$rakefile_content = <<eos
task default: :usage

task :usage do
    sh 'rake -T'
end

namespace :run do
  desc 'run dev mode'
  task :dev do
    puts "run dev..."
  end
end
eos

def new_rakefile
  content = $rakefile_content

  write 'Rakefile', content
end

def new_procfile
  content = <<-eos
# sample
web: python serve.py
redis: redis-server

eos
  puts 'create Procfile...'
  File.write 'Procfile', content
end

def new_dockercompose
  content = <<-eos
version: '2'

services:
  seagull:
    restart: always
    image: tobegit3hub/seagull
    ports:
      - "10086:10086"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
eos
  puts 'create docker-compose.yml'
  File.write 'docker-compose.yml', content
end

def new_nginx_conf
  content = <<-eos
worker_processes 4;
error_log logs/error.log;
events {
    worker_connections 1024;
}

http {
    server {
        listen 8080;
        location / {
            default_type text/html;
            proxy_pass http://localhost:3000;
            #content_by_lua '
            #    ngx.say("<p>hello, world</p>")
            #';
        }
    }
}

eos

  puts 'create nginx config file...'
  write 'nginx.conf', content
end

def new_openresty_project
  project_name = ARGV[1] || 'test_openresty'
  sh("mkdir -p #{project_name}/logs")
  sh("mkdir -p #{project_name}/conf")

  content = <<-eos
worker_processes  1;
error_log logs/error.log;

events {
    worker_connections 1024;
}

http {
    server {
        listen 3000;
        location / {
            default_type text/html;
            content_by_lua '
                ngx.say("<p>hello, world</p>")
            ';
        }
    }
}

  eos

  File.write "#{project_name}/conf/nginx.conf", content

  content = <<-eos
def start():
    """nginx start"""
    local('[ -d "./logs" ] || mkdir logs')
    local('nginx -p `pwd`/ -c conf/nginx.conf')


def run():
    """nginx run"""
    start()


def reload():
    """nginx reload"""
    local('nginx -p `pwd`/ -s reload')


def stop():
    """nginx stop"""
    with warn_only():
        local('nginx -p `pwd`/ -s stop')


def restart():
    """restart"""
    stop()
    run()


  eos

  content = "#{$base_fabfile_content}#{content}"

  File.write "#{project_name}/fabfile.py", content

  content = <<-eos
*.pyc

logs/

tmp/
target/

.idea/

eos

  File.write "#{project_name}/.gitignore", content

  puts "cd #{project_name}"
end

def _parse(type)
  _, tmp, *tail = ARGV

  if !tmp || tmp.start_with?('-')
    project_name = "test_#{type}"
    args = tail.insert(0, tmp)
  else
    project_name = tmp || "test_#{type}"
    args = tail
  end

  [project_name, args]
end

def new_kotlin_project
  project_name, args = _parse('kotlin')
  sh "ktnew #{project_name} #{args.join(' ')}"
end

def new_swift_project
  project_name, args = _parse('swift')
  sh "swiftnew #{project_name} #{args.join(' ')}"
end

def new_elixir_project
  project_name, args = _parse('elixir')

  if args.include?('--bin')
    args.delete('--bin')
    sh "mix new #{project_name} #{args.join(' ')}"
    sh("cd #{project_name};new fabfile")
    sh("echo /#{project_name} >> #{project_name}/.gitignore")

    content = <<-eos
defmodule MyApp.CLI do
  def main(_args) do
    IO.puts("Hello from MyApp!")
  end
end
eos

    write "#{project_name}/lib/main.ex", content

    module_name = (File.read("#{project_name}/mix.exs").match /defmodule (.+)\..+ do/)[1]
    content = <<-eos
defmodule #{module_name}.Mixfile do
  use Mix.Project

  def project do
    [app: :#{project_name},
     version: "0.1.0",
     elixir: "~> 1.3",
     build_embedded: Mix.env == :prod,
     start_permanent: Mix.env == :prod,
     deps: deps(),
     escript: escript()]
  end

  def application do
    [applications: [:logger]]
  end

  defp deps do
    []
  end

  def escript do
    [main_module: MyApp.CLI]
  end
end
        eos

    write "#{project_name}/mix.exs", content

    content = <<-eos
#{$base_fabfile_content}
def dist():
    """dist"""
    local('mix escript.build')


def run():
    """run"""
    dist()
    local('./#{project_name}')


def repl():
    """repl"""
    local('iex -S mix')

        eos

    write "#{project_name}/fabfile.py", content
  else
    sh "mix new #{project_name} #{args.join(' ')}"
    content = <<-eos
#{$base_fabfile_content}
def repl():
    """repl"""
    local('iex -S mix')

        eos

    write "#{project_name}/fabfile.py", content
  end
end

def new_vapor_project
  project_name, _args = _parse('vapor')
  sh "vapor new #{project_name}"
  content = <<-eos
'use strict';

var gulp = require('gulp');        // npm install gulp
var vapor = require('gulp-vapor'); // npm install gulp-vapor

/* If your project requires special configuration during */
//vapor.config.commands.build = 'swift build --some-flag';
//vapor.config.commands.start = ['.build/debug/gulp-vapor', ['serve', '--port=80']];

gulp.task('vapor:start', vapor.start);
gulp.task('vapor:reload', vapor.reload);

gulp.task('watch', function() {
   gulp.watch('./Sources/**/*', ['vapor:reload']);
});


gulp.task('default', ['vapor:start', 'watch']);

    eos

  write "#{project_name}/gulpfile.js", content

  sh "echo node_modules >> #{project_name}/.gitignore"

  content = <<-eos
def run():
    local('vapor build && vapor run serve')


def prepare_watch():
    local('npm install gulp gulp-vapor')


def watch():
    local('gulp')


    eos

  content = "#{$base_fabfile_content}#{content}"
  write "#{project_name}/fabfile.py", content
end

def new_rust_project
  project_name, _args = _parse('rust')
  sh "cargo new --bin #{project_name}"
  puts "cd #{project_name}"
end

def new_bs_project
  project_name, _args = _parse('bs')
  sh "bsb -init #{project_name}"
  puts "cd #{project_name}"
end

def new_reason_project
  project_name, _args = _parse('reason')
  sh "bsb -init #{project_name} -theme basic-reason"
  puts "cd #{project_name};upgradeSyntaxFrom2To3 src/*;"
  puts "cd #{project_name};npm run build;node lib/js/src/demo.js"
end

def new_reason_react_project
  project_name, _args = _parse('reason-react')
  sh "bsb -init #{project_name} -theme react"
  sh 'upgradeSyntaxFrom2To3 src/*'
  puts "cd #{project_name};npm install;npm run build;"
end

def new_go_project
  project_name, args = _parse('go')
  sh "gonew #{project_name} #{args.join(' ')}"
end

def new_eta_project
  project_name, _args = _parse('eta')
  sh "mkdir -p #{project_name}"

  sh "cd #{project_name}; epm init --main-is Main.hs -p #{project_name.delete('_')} --version=0.1.0.0 -l MIT -a $USER -e \"live.tang@gmail.com\" -u \"http://deftype.com/projects/#{project_name}\" -s \"test\" -c Other --is-executable --language Haskell2010 --no-comments --source-dir src"

  content = <<-eos
module Main where

main = putStrLn "Hello, World"
eos
  write("#{project_name}/src/Main.hs", content)

  content = <<-eos
    #{$base_fabfile_content}
def run():
    """run"""
    local('epm run')


def dev():
    """dev"""
    local('watchexec "epm run"')


def uberjar_mode():
    """uberjar mode"""
    local('epm clean')
    local('epm configure --enable-uberjar-mode')


def jar_mode():
    """jar mode"""
    local('epm clean')
    local('epm configure --disable-uberjar-mode')


def clean():
    """clean"""
    local('epm clean')
    local('epm install --dependencies-only')


eos

  write("#{project_name}/fabfile.py", content)

  content = <<-eos
dist/
*.pyc
eos

  write("#{project_name}/.gitignore", content)

  content = <<-eos
# #{project_name}

eos
  write("#{project_name}/README.md", content)

  puts "cd #{project_name}"
end

def new_springboot
  project_name, _args = _parse('springboot')
  system("spring init --build=gradle -l kotlin #{project_name}")
  system("cd #{project_name}; gradle wrapper --gradle-version=3.5")
end

def new_elm_project
  project_name, _args = _parse('elm')
  sh "mkdir -p #{project_name}/src"

  content = <<-eos
elm-stuff
tmp

.idea

    eos

  write "#{project_name}/.gitignore", content

  content = <<-eos
import Html exposing (Html, button, div, text)
import Html.App as App
import Html.Events exposing (onClick)

main =
  App.beginnerProgram { model = 0, view = view, update = update }

type Msg = Increment | Decrement

update msg model =
  case msg of
    Increment ->
      model + 1

    Decrement ->
      model - 1

view model =
  div []
    [ button [ onClick Decrement ] [ text "-" ]
    , div [] [ text (toString model) ]
    , button [ onClick Increment ] [ text "+" ]
    ]

    eos

  write "#{project_name}/src/Main.elm", content

  sh "cd #{project_name}; elm-make"

  ep = "#{project_name}/elm-package.json"
  write ep, File.read(ep).sub('"."', '"src"')

  content = <<-eos
# #{project_name}
    eos
  write "#{project_name}/README.md", content
end

def new_rls_toml
  write 'rls.toml', 'unstable_features = true'
end
#############################################

tmp = ARGV[0]
# tmp || (raise "no template!")

case tmp
when 'phoenix'
  new_phoenix_project
when 'fabfile'
  new_fabfile
when 'rakefile'
  new_rakefile
when 'procfile'
  new_procfile
when 'dockercompose'
  new_dockercompose
when 'openresty'
  new_openresty_project
when 'nginx_conf'
  new_nginx_conf
when 'rls_toml'
  new_rls_toml
when 'kotlin'
  new_kotlin_project
when 'swift'
  new_swift_project
when 'elixir'
  new_elixir_project
when 'vapor'
  new_vapor_project
when 'rust'
  new_rust_project
when 'go'
  new_go_project
when 'elm'
  new_elm_project
when 'eta'
  new_eta_project
when 'bs'
  new_bs_project
when 'bucklescript'
  new_bs_project
when 'reason'
  new_reason_project
when 're-react'
  new_reason_react_project
when 're'
  new_reason_project
when 'springboot'
  new_springboot
else
  puts 'Usage:

new kotlin    project_name   |
  rust      project_name   |
  go        project_name   |
  swift     project_name   |
  elixir    project_name   |
  elm       project_name   |
  eta       project_name   |
  bs        project_name   |

  fabfile                  |
  rakefile                 |
  procfile                 |
  dockercompose            |
  nginx_conf               |
  rls_toml                 |

  vapor     project_name   |
  phoenix   project_name   |
  openresty project_name   |
  springboot project_name  |
  re-react   project_name  |
  '
  # raise "unsupported"
end
