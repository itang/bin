#!/bin/bash

function new(){
  set -x
  cargo new "$@"
  set +x
}

function new_fab() {
  p=$1
  (cd "$p"; cat > fabfile.py <<- EOF
# -*- coding: utf-8 -*-

from fabric.api import *


def dev():
    """dev"""
    local("cargo watch -x run")


def run():
    """run"""
    local('cargo run')


def build():
    """build in release"""
    local('cargo build --release')


def build_musl():
    """build musl"""
    local('cargo build --release --target x86_64-unknown-linux-musl')


def build_musl_upx():
    """tip"""
    build_musl()
    local('du -sh target/x86_64-unknown-linux-musl/release/$p')
    local('cp target/x86_64-unknown-linux-musl/release/$p target/x86_64-unknown-linux-musl/release/$p.orig')
    local('upx target/x86_64-unknown-linux-musl/release/$p')
    local('du -sh target/x86_64-unknown-linux-musl/release/$p')
    print('try run: target/x86_64-unknown-linux-musl/release/$p')


def setup_idea():
    """setup idea"""
    local('unset https_proxy http_proxy;cargo metadata --verbose --format-version 1 --all-features')

EOF
  )
}

for x in "$@"; do 
  if [ "${x:0:1}" != "-" ]; then
    project=$x
  fi
done
project=${project:-"test_rust"}

if [[ -d "$project" ]]; then
   echo "$project already exists"
   exit 1
fi 

if [ "$#" -le 1 ]; then
  new "$project" --bin 
else
  new "$@" 
fi

new_fab "$project"

echo '/target/
**/*.rs.bk

*.pyc

.idea
*.iml' >> "$project/.gitignore"

echo ""
echo "cd $project"
