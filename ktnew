#!/usr/bin/env ruby

KOTLIN_VERSION = '1.0.2'.freeze

name = ARGV[0] || 'test-kotlin'

def sh(cmd)
  puts cmd
  ret = system cmd
  raise 'error' unless ret
end

################################################################################
sh "mkdir #{name}"

%w(java resources kotlin).each do |x|
  sh "mkdir -p #{name}/src/main/#{x}"
end

sh "cd #{name}; gradle init"

build_content = <<-eos
buildscript {
    ext {
        kotlinVersion = '#{KOTLIN_VERSION}'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
  id "us.kirchmeier.capsule" version "1.0.2"
}

apply plugin: "kotlin"
apply plugin: 'application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven {
        url "http://www.haoshuju.net:8078/"
    }
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    //compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
}

mainClassName = 'demo.MainKt'
defaultTasks 'run'

task fatCapsule(type: FatCapsule) {
    applicationClass project.mainClassName
}

task fatRun(type: Exec, dependsOn: 'fatCapsule') {
    workingDir "./build/libs"

    commandLine "java", "-jar", "${project.name}-capsule.jar"

    //store the output instead of printing to the console:
    //standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    //ext.output = {
    //    return standardOutput.toString()
    //}
}

eos

File.write "#{name}/build.gradle", build_content

main_content = <<-eos
package demo

fun main(args: Array<String>) {
    println("Hello, Kotlin")
}

eos

sh "mkdir -p #{name}/src/main/kotlin/demo"
File.write "#{name}/src/main/kotlin/demo/Main.kt", main_content

################################################################
gp_content = <<-eos
kotlin.incremental=true
eos

File.write "#{name}/gradle.properties", gp_content

gitignore_content = <<-eos
.gradle
build/

# Ignore Gradle GUI config
gradle-app.setting

# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)
# !gradle-wrapper.jar

# Cache of project
.gradletasknamecache

.idea
*.iml

.settings
.classpath
.project

eos
File.write "#{name}/.gitignore", gitignore_content

## guard file

guard_content = <<-eos
## gem install guard-shell
guard :shell do
  watch(/src\\/(.*).kt/) do |m|
    puts m[0] + " has changed."
    system "gradle --daemon run"
  end
end
eos

File.write "#{name}/Guardfile", guard_content

sh "cd #{name}; tree"
